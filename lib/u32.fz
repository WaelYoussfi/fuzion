# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature u32
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# u32 -- 32-bit unsigned integer values
#
u32(val u32) : wrappingInteger<u32>, hasInterval<u32> is

  redef thiz => u32.this.val

  redef zero u32 is 0
  redef one  u32 is 1

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrappedOnNeg => !isZero

  # would addtion thiz + other cause an overflow or underflow?
  redef overflowOnAdd (other u32) => max -° u32.this < other
  redef underflowOnAdd(other u32) => false

  # would subtraction thiz - other cause an overflow or underflow?
  redef overflowOnSub (other u32) => false
  redef underflowOnSub(other u32) => u32.this < other

  # would multiplication thiz * other cause an overflow or underflow?
  redef overflowOnMul (other u32) => as_i64 *° other.as_i64 > max.as_i64
  redef underflowOnMul(other u32) => false

  # neg, add, sub, mul with wrap-around semantics
  redef prefix -° u32 is intrinsic
  redef infix +° (other u32) u32 is intrinsic
  redef infix -° (other u32) u32 is intrinsic
  redef infix *° (other u32) u32 is intrinsic

  # division and remainder with check for div-by-zero
  redef infix / (other u32)
    pre
      safety: other != 0
   => div(other)
  redef infix % (other u32)
    pre
      safety: other != 0
   => mod(other)

  # private division and remainder with crash in case of div-by-zero
  private div (other u32) u32 is intrinsic
  private mod (other u32) u32 is intrinsic

  # bitwise and and or operations
  redef infix &  (other u32) u32 is intrinsic
  redef infix |  (other u32) u32 is intrinsic

  # shift operations (unsigned)
  redef infix >> (other u32) u32 is intrinsic
  redef infix << (other u32) u32 is intrinsic

  # comparison
  redef infix == (other u32) bool is intrinsic
  redef infix != (other u32) bool is intrinsic
  redef infix <  (other u32) bool is intrinsic
  redef infix <= (other u32) bool is intrinsic
  redef infix >  (other u32) bool is intrinsic
  redef infix >= (other u32) bool is intrinsic

  as_i32 i32
    pre
      debug: u32.this <= i32(0).max.as_u32
    is
      castTo_i32
  as_i64 i64 is intrinsic
  as_u64 u64
    is
      u32.this.as_i64.as_u64

  castTo_i32 i32 is intrinsic

  redef min u32 is 0
  redef max u32 is 4294967295
