# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature string
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# string -- immutable sequences of utf8 encoded unicode characters
#
string ref : hasHash<string>, ordered<string>, strings is

  redef orderedThis => string.this

  # converting a string to a string is just returning string.this
  redef asString => string.this

  # any concrete string must implement utf8
  utf8 List<i32> is abstract

  # is this string empty?
  isEmpty => !utf8.asStream.hasNext

  # length of this string in bytes
  byteLength => utf8.asStream.count

  # length of this string in codepoints
  codepointLength => codepointsStream.count

  # concatenate string with string representation of another object
  infix + (other Object) string is
    ma := marray<Object> 2, string.this
    ma[1] := other
    strings.fromArray ma

  # repeat string given number of times
  infix * (n i32) ref : string
  pre
    n >= 0
  is
    redef utf8 ref : List<i32> is
      redef asStream ref : stream<i32> is
        i := 0
        bytes := string.this.utf8.asStream

        redef hasNext => i < n && bytes.hasNext
        redef next i32 is
          res := bytes.next
          if !bytes.hasNext
            set i := i + 1
            if i < n
              set bytes := string.this.utf8.asStream
          res


  # compare string byte-by-byte with other string
  redef infix = (other string) =>
    s1 :=       utf8.asStream
    s2 := other.utf8.asStream
    while s1.hasNext && s2.hasNext
    until s1.next    != s2.next
      false
    else
      !s1.hasNext && !s2.hasNext

    /* NYI: when lazy evaluation works, this should be possible:

    s1 :=       utf8.asStream
    s2 := other.utf8.asStream
    while s1.hasNext == s2.hasNext && (!s1.hasNext || s1.next == s2.next)
    until !s1.hasNext

    */

  infix == (other string) => string.this = other    # NYI: replace by 'infix ='

  # does this come before other?
  #
  # This defines a total order over strings that is unrelated to alphabetic order.
  #
  infix <= (other string) =>
    s1 :=       utf8.asStream     # NYI: can this be made more beautiful using lists?
    s2 := other.utf8.asStream
    for
      b1 := if (s1.hasNext) s1.next else -1
      b2 := if (s2.hasNext) s2.next else -1
    until b1 != b2 || b1 < 0
      b1 <= b2


  # create hash code from a string
  hash u64 is
    shL := 13.as_u64
    shR := 51.as_u64
    for
      h u64 := 0, ((h << shL) | (h >> shR)) ^ b.as_u64;
      b in utf8
    while true
    else
      h


  # internal helper to create error for failed parsing
  #
  private parseError(msg string) => error "failed to parse '{string.this}': $msg"


  # parse this string as a signed 32-bit integer value
  #
  parseI32       outcome<i32> is parseI32 10
  parseI32Binary outcome<i32> is parseI32 2
  parseI32Octal  outcome<i32> is parseI32 8
  parseI32Hex    outcome<i32> is parseI32 16
  parseI32 (base i32) outcome<i32>
    pre 1 < base <= 36
  is
    parseInteger<i32> base


  # parse this string as an unsigned 32-bit integer value
  #
  parseU32       outcome<u32> is parseU32 10
  parseU32Binary outcome<u32> is parseU32 2
  parseU32Octal  outcome<u32> is parseU32 8
  parseU32Hex    outcome<u32> is parseU32 16
  parseU32 (base u32) outcome<u32>
    pre 1.as_u32 < base <= 36
  is
    parseInteger<u32> base


  # parse this string as a signed 64-bit integer value
  #
  parseI64       outcome<i64> is parseI64 10
  parseI64Binary outcome<i64> is parseI64 2
  parseI64Octal  outcome<i64> is parseI64 8
  parseI64Hex    outcome<i64> is parseI64 16
  parseI64 (base i64) outcome<i64>
    pre 1.as_i64 < base <= 36
  is
    parseInteger<i64> base


  # parse this string as an unsigned 64-bit integer value
  #
  parseU64       outcome<u64> is parseU64 10
  parseU64Binary outcome<u64> is parseU64 2
  parseU64Octal  outcome<u64> is parseU64 8
  parseU64Hex    outcome<u64> is parseU64 16
  parseU64 (base u64) outcome<u64>
    pre 1.as_u64 < base <= 36
  is
    parseInteger<u64> base


  # parse this string as an int value of arbitrary size
  #
  parseInt       outcome<int> is parseInt int(10)
  parseIntBinary outcome<int> is parseInt int(2)
  parseIntOctal  outcome<int> is parseInt int(8)
  parseIntHex    outcome<int> is parseInt int(16)
  parseInt (base int) outcome<int>
    pre (int 1) < base <= int 36
  is
    parseInteger<int> base


  # parse this string as a integer value given as type parameter
  #
  parseInteger<T: integer<T>> (

    # base gives the base of the integer, must be between 2 and 36, inclusive.
    base T

    ) outcome<T>

    pre base.one < base <= base.from_u32 36

  is
    s := utf8.asStream
    c := if (s.hasNext) s.next else -1
    negate := c = minusChar
    d := if (negate || c = plusChar) zeroChar else c
    parseInteger<T> base, negate, base.zero, d, s


  # recursive helper for parseInteger<T>(T)
  #
  private parseInteger<T: integer<T>>(

    # base gives the base, between 2 and 36
    base T,

    # do we parse a negative number?
    neg bool,

    # the value of the highest digits already parsed
    hi numOption<T>,

    # the current character to be parsed
    c i32,

    # the remaining characters to be parsed
    s stream<i32>

    ) outcome<T>

  is

    d i32 | error := if      (zeroChar <= c <= nineChar) c - zeroChar
                     else if (aChar    <= c <= zChar   ) c - aChar    + 10
                     else if (capAChar <= c <= capZChar) c - capAChar + 10
                     else parseError "non-digit found"

    # NYI: with more syntactic sugar, the following 3 lines could become
    #
    # i := d?

    match d
      e error => e
      i i32 =>
        t := base.from_u32 i.as_u32  # i converted to T
        if t >= base
          parseError "invalid integer digit for base $base"
        else
          hi := hi *? base;
          v := if (neg) hi -? t
               else     hi +? t
          if s.hasNext
            parseInteger<T> base, neg, v, s.next, s
          else
            v ? nil => parseError "numerical overflow"
              | u T => u


  # convert this string into an array of codepoints.
  #
  codepointsArray => codepointsStream.asArray


  # convert this string into a stream of codepoint and errors for encoding problems
  # found in the underlying utf8 bytes
  #
  codepointsStream : List<codepoint> is
    redef asStream ref : stream<codepoint> is
      s := codepointsAndErrors
      n option<codepoint> := nil

      redef hasNext => s.hasNext
      redef next =>
        s.next ? c codepoint => c
               | e error     => codepoint 0xFFFD # 'REPLACEMENT CHARACTER' (U+FFFD)

  # convert this string into a stream of codepoint and errors for encoding problems
  # found in the underlying utf8 bytes
  #
  codepointsAndErrors stream<outcome<codepoint>> is codepointStream


  # the stream instance returned by codepointsStream
  #
  private codepointStream : stream<outcome<codepoint>> is
    s := utf8.asStream
    hasNext => s.hasNext
    next outcome<codepoint> is
      b1 := (s.next & 0xFF).as_u32
      # UTF-8 definition taken from https://en.wikipedia.org/wiki/UTF-8
      if b1 ∈ codepoints.utf8EncodedInOneByte           # ASCII
        codepoint b1
      else if 0xc0.as_u32 <= b1 <= 0xf4
        if !s.hasNext
          error "Bad UTF8 encoding found: cannot decode: $b1 at end of string: expected continuation byte"
        else
          b2 := (s.next & 0xFF).as_u32
          if (b2 & 0xc0) != 0x80
            error "Bad UTF8 encoding found: cannot decode $b1, $b2, expected continuation byte in the range 0x80..0xbf."
          else if 0xc0.as_u32 <= b1 <= 0xdf   # 0x0080..0x7ff encoded in 2 bytes
            res := (b1 & 0x1f) << 6 | (b2 & 0x3f)
            if res ∉ codepoints.utf8EncodedInTwoBytes
              error "Bad UTF8 encoding found: $b1, $b2: codepoint $res uses overlong 2-byte encoding, allowed for range {codepoints.utf8EncodedInTwoBytes}."
            else
              codepoint res
          else if 0xe0.as_u32 <= b1
            if !s.hasNext
              error "Bad UTF8 encoding found: cannot decode: $b1, $b2 at end of string, expected continuation byte"
            else
              b3 := (s.next & 0xFF).as_u32
              if (b3 & 0xc0) != 0x80
                error "Bad UTF8 encoding found: cannot decode $b1, $b2, $b3, expected two continuation bytes in the range 0x80..0xbf."
              else if b1 <= 0xef       # 0x0800..0xffff encoded in 3 bytes
                res := ((b1 & 0x0f) << 12) |
                       ((b2 & 0x3f) <<  6) |
                       ((b3 & 0x3f)      )
                if res ∉ codepoints.utf8EncodedInThreeBytes
                  error "Bad UTF8 encoding found: $b1, $b2, $b2: codepoint $res uses overlong 3-byte encoding, allowed for range {codepoints.utf8EncodedInTwoBytes}."
                else if res ∈ codepoints.utf16Surrogate
                  error "Bad UTF8 encoding found: $b1, $b2, $b3: codepoint $res is invalid, values in the range {codepoints.utf16Surrogate} are reserved for UTF-16 surrogate halves."
                else if res ∈ codepoints.notACharacter
                  error "Bad UTF8 encoding found: $b1, $b2, $b3: codepoint $res is not a valid unicode character {codepoints.notACharacter}."
                else
                  codepoint res
              else                     # 0x010000..0x10ffff encoded in 4 bytes
                if !s.hasNext
                  error "Bad UTF8 encoding found: cannot decode: $b1, $b2,$b2 at end of string, expected continuation byte"
                else
                  b4 := (s.next & 0xFF).as_u32
                  if (b4 & 0xc0) != 0x80
                    error "Bad UTF8 encoding found: cannot decode $b1, $b2, $b3, $b4, expected three continuation bytes in the range 0x80..0xbf."
                  else
                    res := (((b1 & 0x07) << 18) |
                            ((b2 & 0x3f) << 12) |
                            ((b3 & 0x3f) <<  6) |
                            ((b4 & 0x3f)      )   )
                    if res ∉ codepoints.utf8EncodedInFourBytes
                      error "Bad UTF8 encoding found: $b1, $b2, $b2, $b4: codepoint $res uses overlong 4-byte encoding."
                    else if res > 0x10ffff
                      error "Bad UTF8 encoding found: $b1, $b2, $b2, $b4: codepoint $res is outside of the allowed range for codepoints 0x000000..0x10ffff."
                    else
                      codepoint res
      else if 0x80.as_u32 <= b1 <= 0xbf
        error "Bad UTF8 encoding found: $b1: stray continuation byte without preceding leading byte."
      else if 0xf5.as_u32 <= b1 <= 0xfd
        error "Bad UTF8 encoding found: $b1: codes 0xf8..0xff are undefined."
      else if 0xfe.as_u32 <= b1 <= 0xff
        error "Bad UTF8 encoding found: $b1: codes 0xfe and 0xff are undefined, used for endianess checking."
      else
        fuzion.std.panic "string.codepointStream: missing case for $b1"


  # create substring of this string consisting of codepoints from (indlusive) .. to (exclusive).
  #
  substring(from, to i32) string
    pre
#     debug: 0 <= from <= to <= codepointLength        -- NYI: this does not work yet
      debug: 0 <= from <= to && to <= codepointLength
  is
    codepointsArray
      .slice(from, to)
      .map<string>(fun (c codepoint) string is c)  # NYI: this should maybe not be needed since codepoint is a string
      .fold strings.concat


  # check if this string starts with given prefix
  #
  startsWith(prefx string) =>
    searchableList<i32>.startsWith utf8.asList, prefx.utf8.asList


  # check if this string ends with given suffix
  #
  endsWith(suffix string) =>
    l  := byteLength
    sl := suffix.byteLength
    end := utf8.drop l-sl
    searchableList<i32>.startsWith end, suffix.utf8.asList


  # find (utf8-byte-) index of 'substring' witin this string.
  #
  find(substring string) =>
    searchableList<i32>.find utf8.asList, substring.utf8.asList


  # replace all occurances of f within l by r
  #
  replace (f, r string) => strings.fromBytes (searchableList<i32>.replace utf8.asList f.utf8.asList r.utf8.asList)


  # does this string contain the given 'substring'
  #
  contains (substring string) => find(substring).exists


  # count number of occurances of given 'substring' in this string
  #
  count (substring string) =>
    searchableList<i32>.countMatches utf8.asList, substring.utf8.asList


  # is c an ASCII white-space character?  Used by split.
  #
  private isAsciiWhiteSpace(c i32) =>
    (c =  9 ||  // HT
     c = 10 ||  // LF
     c = 11 ||  // VT
     c = 12 ||  // FF
     c = 13 ||  // CR
     c = 32     // SPACE
     )


  # Split string separated by (ASCII) white space
  #
  # Leading and trailing white space is ignored, repeated white space is treated
  # like a single white space
  #
  # The result is a, possibly empty, list of separate non-empty strings.
  #
  split list<string> is
    l := utf8.asList.dropWhile (fun (c i32) => isAsciiWhiteSpace c)
    if l.isEmpty
      nil
    else
      ref : Cons<string, list<string>> {
        head =>  strings.fromBytes (l.takeWhile (fun (c i32) => !isAsciiWhiteSpace c))
        tail => (strings.fromBytes (l.dropWhile (fun (c i32) => !isAsciiWhiteSpace c))).split
        # NYI using the inherited 'fromBytes' as in
        #
        #   head =>  fromBytes l.takeWhile fun (c i32) => !isAsciiWhiteSpace c
        #
        # currerntly creates an error (recursive value type), this needs to be fixed (or,
        # at least, understood better).
       }
