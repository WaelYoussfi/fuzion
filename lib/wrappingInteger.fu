# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature wrappingInteger
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# wrappingInteger
#
#
# wrappingInteger is the abstract ancestor of integer numbers that have min and
# max values and operations with wrap-around semantics.
#
wrappingInteger<T: wrappingInteger<T>> : integer<T> is

  # overflow checking

  # would negation -thiz cause an overflow?
  wrappedOnNeg bool is abstract

  # would addtion thiz + other cause an overflow or underflow?
  overflowOnAdd(other T) bool is abstract
  underflowOnAdd(other T) bool is abstract
  wrappedOnAdd(other T) => overflowOnAdd(other) || underflowOnAdd(other)

  # would subtraction thiz - other cause an overflow or underflow?
  overflowOnSub(other T) bool is abstract
  underflowOnSub(other T) bool is abstract
  wrappedOnSub(other T) => overflowOnSub(other) || underflowOnSub(other)

  # would multiplication thiz * other cause an overflow or underflow?
  overflowOnMul(other T) bool is abstract
  underflowOnMul(other T) bool is abstract
  wrappedOnMul(other T) => overflowOnMul(other) || underflowOnMul(other)

  # neg, add, sub, mul with wrap-around semantics
  prefix -° T is abstract
  infix +° (other T) T is abstract
  infix -° (other T) T is abstract
  infix *° (other T) T is abstract

  min T is abstract
  max T is abstract

  isMin => thiz == min
  isMax => thiz == max

  # basic operations with runtime error on overflow

  # negation, with check for overflow
  redef prefix - T
    pre
      debug: !wrappedOnNeg
  is -° thiz

  # addition, with check for overflow
  redef infix +  (other T) T
    pre
      debug: !overflowOnAdd(other),
      debug: !underflowOnAdd(other)
  is thiz +° other

  # substraction, with check for overflow
  redef infix -  (other T) T
    pre
      debug: !overflowOnAdd(other),
      debug: !underflowOnAdd(other)
  is thiz -° other

  # multiplication, with check for overflow
  redef infix *  (other T) T
    pre
      debug: !overflowOnMul(other),
      debug: !underflowOnMul(other)
  is thiz *° other

  # overflow checking operations
  redef prefix -?          numOption<T> is if wrappedOnNeg        nil else -thiz
  redef infix +? (other T) numOption<T> is if wrappedOnAdd(other) nil else thiz + other
  redef infix -? (other T) numOption<T> is if wrappedOnSub(other) nil else thiz - other
  redef infix *? (other T) numOption<T> is if wrappedOnMul(other) nil else thiz * other

  # saturating  operations
  redef prefix -^          => if wrappedOnNeg if thiz > zero min else max else - thiz
  redef infix +^ (other T) => if overflowOnAdd(other) max else if underflowOnAdd(other) min else thiz + other
  redef infix -^ (other T) => if overflowOnSub(other) max else if underflowOnSub(other) min else thiz - other
  redef infix *^ (other T) => if overflowOnMul(other) max else if underflowOnMul(other) min else thiz * other