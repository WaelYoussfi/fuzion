# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature handles
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# handles provide a means to create handles that refer to update-able
# cells.
#
# handles is a state monad.  It provides features to create several
# handles that refeor to modifiable value and features to 'get', 'put' or
# 'update' this value.
#
private handles<T,X>(

  # the inner value of this monad
  v X,

  # array containing values stored for the handles
  #
  # NYI: As soon as one-way monads are enforced, this array can be implemented
  # using marray, reducing the overhead of an update from O(count) to O(1)!
  #
  private ar array<T>,

  # action to be taken: plain nomad, install or replace?
  redef r onewayMonadModes
  ) : onewayMonad<X, handles<T,X>> r
is

  # number of handles created
  private count => ar.length


  # create a new instance with one additional handle
  #
  # the new handle can be accessed by 'result.last'
  #
  new (
    # initial value refered to by the new handle
    w T
    ) handles<T,X>
  post
   result.hasLast
  is
    na := array<T> count+1 (i -> if (i < count) ar[i] else w)
    handles<T,X> v na mode


  # has one element been created using 'new'?
  #
  hasLast => count > 0


  # return the last handle that was created by 'new'
  #
  last
    pre
      hasLast
   =>
    handle<T> count-1


  # a one-way feature to create a new handle and update the monad
  # in the current environment
  #
  /* env */
  create (
    # initial value refered to by the new handle
    w T
    )
   =>
    (new w).last


  # get the value refered to by a given handle
  #
  get (
    # a handle created by 'new'
    h handle<T>
    )
   =>
    ar[h.x]


  # create a new instance with new value refered to by a given handle
  #
  put (
    # a handle created by 'new'
    h handle<T>,

    # the new value to be stored with 'h'
    w T)
   =>
    handles<T,X> v (ar.put h.x w) mode


  # create a new instance with the value refered to by a given handle read and
  # updated.
  #
  update (
    # a handle created by 'new'
    h handle<T>,

    # function calculcating the new value from the old value
    f T->T
    )
   =>
    handles<T,X> v (ar.put h.x (f ar[h.x])) mode


  infix >>= (f X -> handles<T,X>) => bind<X> f

  bind <B> (f X -> handles<T,B>) handles<T,B> is
    handles<T,B> (f v).v ar onewayMonadMode.plain

  return<B> (w B) => handles<T,B> w ar onewayMonadMode.plain

# short-hand for creating and installing an empty set of handles of given type.
#
handles<T>(rr ()->unit) =>
  handles<T,unit> unit (array<T> 0 x->do) (onewayMonadMode.inst rr)
  unit

# short-hand for creating an empty set of handles of given type.
#
handles<T> => handles<T,unit> unit (array<T> 0 x->do) onewayMonadMode.plain


# handle value created by 'handles.new'
#
private handle<T>(
  # the index in 'handles.ar'
  private x i32
  )
is
