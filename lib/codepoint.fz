# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature codepoint
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# codepoint represents a unicode codepoint
#
codepoint(val u32) : string, codepoints
  pre
    debug: range.contains(val),
    debug: !utf16Surrogate.contains val
is

  # the utf8 encoded bytes for the string representation
  # of this codepoint
  #
  redef utf8 streamable<i32> is
    v := val.as_i32
    if      utf8EncodedInOneByte   .contains val then [ val.as_i32 ]
    else if utf8EncodedInTwoBytes  .contains val then [ 0xc0 | (v >>  6) & 0x1f,
                                                        0x80 |  v        & 0x3f ]
    else if utf8EncodedInThreeBytes.contains val then [ 0xe0 | (v >> 12) & 0x1f,
                                                        0x80 | (v >>  6) & 0x3f,
                                                        0x80 |  v        & 0x3f ]
    else if utf8EncodedInFourBytes .contains val then [ 0xf0 | (v >> 18) & 0x07,
                                                        0x80 | (v >> 12) & 0x3f,
                                                        0x80 | (v >>  6) & 0x3f,
                                                        0x80 |  v        & 0x3f ]
    else
      fuzion.std.panic "failed to encode code point " + codepoint.this
