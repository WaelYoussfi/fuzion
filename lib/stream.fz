# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature stream
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# stream -- a stream of values
#
# NYI: Check if stream should be replaced by a lazy list, which is a choice
# of either nil or a tuple (head, tail). This should avoid the need to store
# mutable state.
stream<T> ref is

  # apply f to all elements in this stream
  #
  forAll(f fun (T)) unit is while hasNext do f(next)


  # apply f to all elements in this stream, infix operator synonyme of forAll.
  #
  infix | (f fun (T)) unit is while hasNext do f(next)


  # apply 'f' to each element 'e' as long as 'f e'
  #
  forWhile(f fun (T) bool) unit is while hasNext && f(next)


  # create a new stream that contains the first elements of this stream for
  # which 'f e' is false
  #
  before(f fun (T) bool) ref : stream<T> is
    nextCache := stream.this.next  # NYI should be option<T> and set to None if !stream.this.hasNext
    redef hasNext => !f(nextCache)
    redef next T is
      res := nextCache
      set nextCache := stream.this.next
      res


  # create new stream from all elements for which predicate f is true
  #
  filter(f fun (T) bool) ref : stream<T> is
    cache T := ?  # NYI: should be option<T>
    cacheOk := false
    next2
    redef hasNext => cacheOk
    redef next T is
      res := cache
      set cacheOk := false
      next2
      res
    next2 unit is
      while !cacheOk && stream.this.hasNext
        set cache := stream.this.next
        set cacheOk := f(cache)


  # create a new stream from all elements for which predicate f is true, infix
  # operator synonyme of filter.
  #
  infix |& (f fun (T) bool) stream<T> is filter(f)


  # create a new stream from all elements for which predicate f is true, infix
  # operator synonyme of filter.
  #
  # NYI: What is better, 'infix |&' or 'infix &', or something else?
  #
  infix & (f fun (T) bool) => filter f


  # check if predicate f holds for all elements produced by this stream
  #
  infix ∀ (f fun (T) bool) bool is
    while hasNext: f next   # hasNext implies f next
    until !hasNext


  # check if predicate f holds for at least one element produced by this stream
  #
  infix ∃ (f fun (T) bool) bool is
    while hasNext
    until f next


  # does this stream have one more element?
  #
  hasNext bool is abstract


  # the next element in this stream
  #
  next T
  /* NYI: C backend creates broken code for calling precondition of abstract feature
    pre
      hasNext
   */
  is abstract


  # get the next element or nil if !hasNext
  #
  nextIfExists option<T> is
    if hasNext
      next
    else
      nil


  # print the elements of this stream
  #
  print unit is
    forAll(fun (x T) is
      yak x
      if hasNext then yak ", ")


  # count the elements of this stream
  #
  count i32 is
    # NYI: check if this works: map<i32>(fun f(x T) => 1).fold i32.sum
    res := 0
    forAll(fun (x T) is set res := res + 1)
    res


  # collect the first n elements of this stream into an array
  #
  take (n i32) => array<T>(n, fun (_ i32) => next)


  # create a string from the elements of this stream
  #
  redef asString ref string is
    # NYI: check if this works: map<string>(fun f(x T) => x.asSring).fold strings.concat ", "
    #
    res := ""
    forAll(fun (x T) is set res := res + x.asString; if hasNext then set res := res + ", ")
    res


  # map the stream to a new stream applying function f to all elements
  #
  # This performs a lazy mapping, f is called only when the elements
  # are taken from the stream.
  #
  map<B>(f fun(T) B) stream<B> is
    ref : stream<B>
      {
        hasNext => stream.this.hasNext
        next B is f stream.this.next
      }


  # NYI: This currently does not work with the C backend since generics resolution
  # for stream.this.next confuses the type from the outer feature (T) with the type
  # from the inherited feature (B).
  map_broken <B>(f fun(T) B) : stream<B> is
    hasNext => stream.this.hasNext
    next B is f stream.this.next


  # fold the elements of this stream using the given monoid.
  #
  # e.g., to sum the elements of a stream of i32, use s.fold i32.sum
  #
  fold (m Monoid<T>) => fold m.e, m


  # fold the elements of this stream using the given monoid m and initial value s.
  #
  # e.g., to sum the elements of a stream of i32, use s.fold i32.sum
  #
  fold (s T, m Monoid<T>) =>
    for
      r := s, m.op r, next
    while hasNext
    else
      r
