# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature array
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# array -- one-dimensional immutable array
#
array<T>(length i32, init fun (i32) T) : streamable<T> is

# private:

// NYI: use data := sys.array<T> length once conststring can handle this.
  data := alloc<T> length

  for x in indices do
    setel data, x, init x

  alloc<X>(l i32) Object is intrinsic
  get  <X>(d Object, i i32) X is intrinsic
  setel<X>(d Object, i i32, o X) unit is intrinsic

# public:

  indices => 0..length-1

  index [ ] (i i32) T
    pre
      safety: 0 <= i < length
  is
    get<T>(data,i)

  iterate(f fun (T)) unit is
    asStream.consume(f)

  redef asStream ref : stream<T> is
    x := 0
    redef hasNext => x < length
    redef next => set x := x + 1; get<T>(data, x - 1)


  # create a list from this array
  #
  asList => asList 0


  # create a list from this array starting at the given index
  #
  asList(i i32) list<T>
    pre
      debug: i >= 0
  is
    if length <= i
      nil
    else
      arrayCons i


  # create a cons cell for a list of this array starting at the given
  # index
  #
  arrayCons (i i32) : Cons<T, list<T>>
    pre
      debug: 0 <= i < length
  is
    head => array.this[i]
    tail => asList i+1
