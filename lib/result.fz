# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature result
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# result represents a result combined or one or several possible error
# conditions.
#
# Several error conditions are needed if there are several very different
# reasons for an operation to fail, e.g.
#
#   getData (u User, t Type) result<data, IOError, PermissionError> is
#     if u.allowedToAcces T
#       (readFile t.fileName)?
#     else
#       PermissionError u, t
#
#   readFile t Type result<data, IOError> is
#     [..]
#
# Note that 'result<data, IOError>' is not assignment compatible with
# 'result<data, IOError, PermissionError>', it has to be unwrapped first.
# This unwrapping, however, requires very little boilerplate, it is done
# using the '?' on the result of the call to 'readFile': This unwrap
# 'result<data, IOError>' into 'IOError', which would be returned abruptly,
# and 'data', which would be returned normally. Both are assignment
# compatible to  'result<data, IOError, PermissionError>', so everything
# is fine.
#
# NYI: move to universe.fz

result<T, E /* ...  NYI: this should be open generic! */ > :
  choice<T, E>
  /* NYI: result should be a monad
  , monad<T, result<t, E...>>
  */
is

# NYI: result is experimental, does not define any features yet
