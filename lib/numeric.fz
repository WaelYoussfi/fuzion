# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature numeric
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# numeric -- parent of all numeric features
#
numeric<T : numeric<T>> : hasHash<T>, ordered<T> is

  # get numeric.this value of type T.  This is used for a generic implemention
  # of some features (e.g. prefix -, abs
  thiz T is abstract

  zero T is abstract
  one  T is abstract

  isZero => numeric.this == zero
  isOne  => numeric.this == one

  # basic operations
  prefix + T is abstract
  prefix - T is zero - thiz
  infix +  (other T) T is abstract
  infix -  (other T) T is abstract
  infix *  (other T) T is abstract
  infix /  (other T) T
    pre
      safety: other != zero
  is abstract
  infix %  (other T) T
    pre
      safety: other != zero
  is abstract

  # overflow checking operations
  prefix -? numOption<T> is - thiz
  infix +? (other T) numOption<T> is thiz + other
  infix -? (other T) numOption<T> is thiz - other
  infix *? (other T) numOption<T> is thiz * other

  # saturating  operations
  prefix -^  T is - thiz
  infix +^ (other T) T is thiz + other
  infix -^ (other T) T is thiz - other
  infix *^ (other T) T is thiz * other

  # comparison
  infix == (other T) bool is abstract   // NYI: remove, replace by 'infix ='
  infix = (other T) bool is thiz == other
  infix != (other T) bool is abstract   // NYI: remove, replace by 'infix /='

  sign => if numeric.this == zero then 0 else if numeric.this > zero then 1 else -1

  abs => if sign >= 0 then thiz else -thiz

/*
has     -- NYI: 'has' keyword not supported yet, so the following require an instance of numeric to be called on
*/

  # monoid of numeric with infix + operation.  Will create sum of all elements it
  # is applied to.
  #
  sum : Monoid<T> is
    redef infix ∙ (a, b T) T is a + b
    redef infix == (a, b T) bool is a == b
    redef e T is zero

  # monoid of numeric with infix * operation.  Will create product of all elements
  # it is applied to.
  #
  product : Monoid<T> is
    redef infix ∙ (a, b T) T is a * b
    redef infix == (a, b T) bool is a == b
    redef e T is one

  # monoid of numeric with infix +^ operation.  Will create sum of all elements it
  # is applied to, stopping at max/min value in case of overflow.
  #
  sumSaturating : Monoid<T> is
    redef infix ∙ (a, b T) T is a +^ b
    redef infix == (a, b T) bool is a == b
    redef e T is zero

  # monoid of numeric with infix *^ operation.  Will create product of all elements
  # it is applied to, stopping at max/min value in case of overflow.
  #
  productSaturating : Monoid<T> is
    redef infix ∙ (a, b T) T is a *^ b
    redef infix == (a, b T) bool is a == b
    redef e T is one

  # minimum of numeric.this and other
  #
  min(other T) T is if (numeric.this <= other) numeric.this else other

  # maximum of numeric.this and other
  #
  max(other T) T is if (numeric.this >= other) numeric.this else other