#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature list
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# list -- feature used to define lists
#
# list provides an abstract type for a sequence of elements of the same type.
#
# A list sequence may be empty and contain no element, or it may have a fixed
# or even infitie number of elements.
#
# The core of the implementation of an actual list lies in the implementation
# of the actual Cons cell a non-empty list consists of.
#
# Lists can typically be treversed using only immutable data. This makes them
# more flexible than streams that require to store and update their state.
#
#
#
list<A> : choice<nil, Cons<A, list<A>>>, streamable<A> is
# list<A> : nil | Cons<A, list<A>> is   -- NYI: sum type syntax
# list<A> : nil | Cons A, list A is     -- NYI: sum type syntax, optional '<', '>'
# list A : nil | Cons A, list A is      -- NYI: sum type syntax, optional '<', '>' (2x)

  # is this list empty?
  #
  isEmpty =>
    match list.this
      _ nil  => true
      c Cons => false


  # count the elements of this list
  #
  redef count => count 0


  # count the elements of this list starting at n.
  # carries n around to make this tail-recursive
  #
  private count (n i32) i32 is
    match list.this
      _ nil  => n
      c Cons => c.tail.count n + 1


  # get the head of this list if it exists
  #
  head option<A>
  is
    match list.this
      _ nil  => nil
      c Cons => c.head


  # get the tail of this list if it exists, nil if it does
  # not exist or it is the empty list
  #
  tail list<A>
  is
    match list.this
      _ nil  => nil
      c Cons => c.tail


  # call f in order on all elements of this list
  #
  redef forAll (f fun (A)) unit is
    match list.this
      _ nil  =>
      c Cons => f c.head; c.tail.forAll f


  # get the head of this list, panic if list is empty
  #
  # NYI: Remove, this is just for experiments
  #
  forceHead A
    pre
      debug: !isEmpty
  is
    match list.this
      _ nil  => panic
      c Cons => c.head


  # get the tail of this list, panic if list is empty
  #
  # NYI: Remove, this is just for experiments
  #
  forceTail list<A>
    pre
      debug: !isEmpty
  is
    match list.this
      _ nil  => panic
      c Cons => c.tail


  # terminate with "*** panic"
  #
  # NYI: Remove, this is just for experiments
  #
  panic void is
    say "*** panic"
    fuzion.std.exit 1


  # map the list to a new list applying function f to all elements
  #
  # This performs a lazy mapping, f is called only when the elements
  # are taken from the list.
  #
  map<B>(f fun(A) B) list<B> is
    match list.this
      _ nil  => nil
      c Cons =>
        ref : Cons<B, list<B>>
        // Cons<B, list<B>> with    # NYI: better syntax for anonymous feature
          head => f c.head
          tail => c.tail.map<B> f

  # fmap lifts a function from A to B to a function from list<A> to list<B>
  #
  # NYI: This should be declared outside of list<A>, it should not require an
  # instance to be called on.
  fmap<B> (f fun(A) B) => fun (l list<A>) => l.map<B> f


  # fold the elements of this list using the given monoid.
  #
  # e.g., to sum the elements of a list of i32, use l.fold i32.sum
  #
  redef fold (m Monoid<A>) => fold m.e, m


  # fold the elements of this list using the given monoid and initial value
  #
  # Used to fold a list tail-recursively
  #
  fold (s A, m Monoid<A>) A is
    match list.this
      _ nil  => s
      c Cons => c.tail.fold m.op(s, c.head), m


  # Take the first n elements of a list, or the whole list if it is shorter than n
  #
  take (n i32) list<A>
    pre
      debug: n >= 0
  is
    if n <= 0
      nil
    else
      match list.this
        _ nil  => nil
        # c Cons => cons c.head, c.tail.take n-1      # NYI: does not work yet, need to check why
        c Cons =>
          {                                         # NYI: indentation syntax for match not supported
            ref : Cons<A, list<A>>
              {                                     # NYI: indentation syntax for anonymous not supported
                redef head => c.head
                redef tail => c.tail.take n-1
              }
          }


  # reverse the order of the elements in this list
  #
  reverse list<A> is
    reverse nil


  # recursively reverse the order of the elements in this list
  # and append the already reversed reversedHead
  #
  reverse (reversedHead list<A>) list<A> is
    match list.this
      _ nil  => reversedHead
      c Cons => c.tail.reverse cons c.head, reversedHead


  # create a string representation of this list including all the string
  # representations of its contents.
  #
  redef asString string is
    map<string> (fun (x A) => x.asString).fold strings.concat ","


  # List concatenation, O(count)
  #
  concatEagerly (t list<A>) list<A> is
    match list.this
      _ nil => t
      c Cons => cons<A, list<A>> c.head, c.tail.concat t


  # Lazy list concatenation, O(1)
  #
  concat (t list<A>) list<A> is
    match list.this
      _ nil => t
      c Cons =>
        match t
          nil => list.this
          c2 Cons =>
            ref : Cons<A, list<A>> {
                head => c.head
                tail => c.tail.concat t
              }


  # infix operand synonyme for concat
  #
  infix ++ (t list<A>) => concat t


  # create a list from the tail of list.this dropping n elements (or fewer
  # if the list is shorter than n).
  #
  drop (n i32) list<A> is
    if n <= 0
      list.this
    else
      match list.this
        nil    => nil
        c Cons => c.tail.drop n-1


  # create stream from this list
  #
  # In contrast to list's immutable Cons cells, a stream instance is mutable, i.e,
  # it cannot be shared with threads or used in pure functions
  #
  redef asStream ref : stream<A> is
    cur := list.this
    redef hasNext =>
      match cur
        Cons => true
        nil  => false
    redef next =>
      res := cur.forceHead
      set cur := cur.forceTail
      res
