# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature numOption
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# numOption -- optional numeric values
#
# This is a pseudo-numeric type that handles one additional
# value: nil.  Any operation on nil will result in nil for a
# numeric result or false for a boolean result.
#
numOption<T: numeric<T>> : choice<T, nil> is

  # monadic operator
  infix >>= (f fun (T) numOption<T>) numOption<T> is
    match numOption.this
      v T   => f(v)
      _ nil => nil

  # monadic operator for bool result, false for nil
  infix >>? (f fun (T) bool) =>
    match numOption.this
      v T   => f(v)
      _ nil => false

  # basic prefix operations
  prefix +? numOption<T> is numOption.this >>= fun(v T) numOption<T> is +v
  prefix -? numOption<T> is numOption.this >>= fun(v T) numOption<T> is -?v

  # basic infix operations
  infix +? (other numOption<T>) numOption<T> is numOption.this >>= fun(v T) => other >>= fun(w T) => v +? w
  infix -? (other numOption<T>) numOption<T> is numOption.this >>= fun(v T) => other >>= fun(w T) => v -? w
  infix *? (other numOption<T>) numOption<T> is numOption.this >>= fun(v T) => other >>= fun(w T) => v *? w
  infix /? (other numOption<T>) numOption<T>
    pre
      safety: !other.isZero
  is
    numOption.this >>= fun(v T) numOption<T> is other >>= fun(w T) numOption<T> is v / w

  infix %? (other numOption<T>) numOption<T>
    pre
      safety: !other.isZero
  is
    numOption.this >>= fun(v T) numOption<T> is other >>= fun(w T) numOption<T> is v % w

  # comparison
  infix ==? (other numOption<T>) bool is numOption.this >>? fun(v T) => other >>? fun(w T) => v == w
  infix !=? (other numOption<T>) bool is numOption.this >>? fun(v T) => other >>? fun(w T) => v != w
  infix <?  (other numOption<T>) bool is numOption.this >>? fun(v T) => other >>? fun(w T) => v <  w
  infix <=? (other numOption<T>) bool is numOption.this >>? fun(v T) => other >>? fun(w T) => v <= w
  infix >?  (other numOption<T>) bool is numOption.this >>? fun(v T) => other >>? fun(w T) => v >  w
  infix >=? (other numOption<T>) bool is numOption.this >>? fun(v T) => other >>? fun(w T) => v >= w

  isZero => sign ==? 0

  sign numOption<i32> is
    match numOption.this
      v T   => v.sign
      _ nil => nil

  abs numOption<T> is
    numOption.this >>= fun (v T) numOption<T> { if v.sign >= 0 v else -?v }
//    numOption.this >>= fun (v T) => if v.sign >= 0 v else -?v     // NYI: check: causes crash! (precondition failure)

  redef asString string is
    match numOption.this
      v T   => v.asString
      _ nil => "--no value--"