# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature Option
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# Option represents an optional value of type T
#
# NYI: move to universe.fz

Option<T> :
  choice<T, nil>,
  monad<T, Option<T>>
is

  # monadic operator
  #
  # This is handy to implement functions on optional values. As an example,
  # take an Option<string> and you would like to add a filename suffix to
  # this string if it is present. Then you can do this as follows:
  #
  #   addTxt(o Option<string>) => o >>= fun (s string) Option<string> is s + ".txt"
  #
  # NYI: With better type inference and syntactic sugar, this should be
  #
  #   addTxt(o Option<string>) => o >>= s -> s + ".txt"
  #
  # NYI: Should maybe have generic parameter <B> and result in Option<B>
  #
  redef infix >>= (f fun (T) Option<T>) => Option.this.bind<T>(f)


  # monadic operator
  #
  # Same as non-generic >>=, but also maps to a different type B.
  #
  bind <B> (f fun (T) Option<B>) Option<B> is
    match Option.this
      v T   => f v
      _ nil => nil


  # synonyme for infix >>=
  andThen (f fun (T) Option<T>) => Option.this >>= f


  # map this Option using f, i.e., map nil to nil and any value v to f v
  #
  map <B> (f fun (T) B) Option<B> is
    match Option.this
      v T   => f v
      _ nil => nil


  # converts Option to a string
  #
  # returns the result of T.asString for an option containing an instance
  # of T, alternatively returns "--nil--" for an Option that is nil.
  #
  redef asString string is
    match Option.this
      v T   => v.asString
      _ nil => "--nil--"
