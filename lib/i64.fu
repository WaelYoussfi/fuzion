# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature i64
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# i64 -- 64-bit signed integer values
#
i64(val i64) : wrappingInteger<i64>, hasInterval<i64> is

  redef thiz => i64.this

  redef zero i64 is 0
  redef one  i64 is 1

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrappedOnNeg => isMin

  # would addtion thiz + other cause an overflow or underflow?
  redef overflowOnAdd (other i64) => i64.this > 0 && max -° i64.this < other
  redef underflowOnAdd(other i64) => i64.this < 0 && min -° i64.this > other

  # would subtraction thiz - other cause an overflow or underflow?
  redef overflowOnSub (other i64) => i64.this > 0 && i64.this -° max > other
  redef underflowOnSub(other i64) => i64.this < 0 && i64.this -° min < other

  # would multiplication thiz * other cause an overflow or underflow?
  redef overflowOnMul (other i64) => if sign *° other.sign <= 0 false else (i64.this *° other / other) != i64.this
  redef underflowOnMul(other i64) => if sign *° other.sign >= 0 false else (i64.this *° other / other) != i64.this

  # neg, add, sub, mul with wrap-around semantics
  redef prefix -° i64 is intrinsic
  redef infix +° (other i64) i64 is intrinsic
  redef infix -° (other i64) i64 is intrinsic
  redef infix *° (other i64) i64 is intrinsic

  # division and remainder with check for div-by-zero
  redef infix / (other i64)
    pre
      safety: other != 0
   => div(other)
  redef infix % (other i64)
    pre
      safety: other != 0
   => mod(other)

  # private division and remainder with crash in case of div-by-zero
  private div (other i64) i64 is intrinsic
  private mod (other i64) i64 is intrinsic

  # bitwise and and or operations
  redef infix &  (other i64) i64 is intrinsic
  redef infix |  (other i64) i64 is intrinsic

  # shift operations (signed)
  redef infix >> (other i64) i64 is intrinsic
  redef infix << (other i64) i64 is intrinsic

  # comparison
  redef infix == (other i64) bool is intrinsic
  redef infix != (other i64) bool is intrinsic
  redef infix <  (other i64) bool is intrinsic
  redef infix <= (other i64) bool is intrinsic
  redef infix >  (other i64) bool is intrinsic
  redef infix >= (other i64) bool is intrinsic

  as_i32 i32
    pre
      i64.this >= i32(0).min.as_i64,
      i64.this <= i32(0).max.as_i64
    is
      low32bits.as_i32
  as_u32 u32
    pre
      i64.this >= 0
#      i64.this <= u32.max.as_i64
#    post
#      analysis:  result.as_i64 == i64.this
    is
      low32bits
  as_u64 u64
    pre
      i64.this >= 0
#    post
#      analysis:  result.as_i64 == i64.this
    is
      castTo_u64

  low32bits  u32 is intrinsic
  castTo_u64 u64 is intrinsic

  redef min => -° max -° 1
  redef max => 9223372036854775807
