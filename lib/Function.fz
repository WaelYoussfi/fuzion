# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature Function
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# Function -- generic function with arbitrary number of arguments and result
#
Function<R,A...> ref is

  call(a A) R is abstract

# NYI: function composition: This needs a solution for either restricing A...
# to a single argument or for converting a Tuple result into A...
#
#  # compose f: B -> A with this: A -> R into this ∘ f: B -> R
#  compose<B>(f fun (B) A) => fun(B b) R => call f b
#
#  # compose f: B -> A with this: A -> R into this ∘ f: B -> R
#  compose<B>(f fun (B) Tuple<A>) => fun(B b) R => call f b /* decompose result automatically? */
#
#  # short-hand infix operation for composition
#  infix ∘ (f fun (B) A) => compose f
