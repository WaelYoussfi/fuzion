# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature i32
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# i32 -- 32-bit signed integer values
#
i32(val i32) : wrappingInteger<i32>, hasInterval<i32>, i32s is

  redef thiz => i32.this.val

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrappedOnNeg => isMin

  # would addtion thiz + other cause an overflow or underflow?
  redef overflowOnAdd (other i32) => i32.this > 0 && max -° i32.this < other
  redef underflowOnAdd(other i32) => i32.this < 0 && min -° i32.this > other

  # would subtraction thiz - other cause an overflow or underflow?
  redef overflowOnSub (other i32) => i32.this > 0 && i32.this -° max > other
  redef underflowOnSub(other i32) => i32.this < 0 && i32.this -° min < other

  # would multiplication thiz * other cause an overflow or underflow?
  redef overflowOnMul (other i32) => as_i64 *° other.as_i64 > max.as_i64
  redef underflowOnMul(other i32) => as_i64 *° other.as_i64 < min.as_i64

  # neg, add, sub, mul with wrap-around semantics
  redef prefix -° i32 is intrinsic
  redef infix +° (other i32) i32 is intrinsic
  redef infix -° (other i32) i32 is intrinsic
  redef infix *° (other i32) i32 is intrinsic

  # division and remainder with check for div-by-zero
  redef infix / (other i32)
    pre
      safety: other != 0
   => div(other)
  redef infix % (other i32)
    pre
      safety: other != 0
   => mod(other)

  # private division and remainder with crash in case of div-by-zero
  private div (other i32) i32 is intrinsic
  private mod (other i32) i32 is intrinsic

  # bitwise and, or and xor operations
  redef infix &  (other i32) i32 is intrinsic
  redef infix |  (other i32) i32 is intrinsic
  redef infix ^  (other i32) i32 is intrinsic

  # shift operations (signed)
  redef infix >> (other i32) i32 is intrinsic
  redef infix << (other i32) i32 is intrinsic

  # comparison
  redef infix == (other i32) bool is intrinsic
  redef infix != (other i32) bool is intrinsic
  redef infix <  (other i32) bool is intrinsic
  redef infix <= (other i32) bool is intrinsic
  redef infix >  (other i32) bool is intrinsic
  redef infix >= (other i32) bool is intrinsic

  # conversion to u32, i64 and u64, with range check
  as_u32 u32
    pre
      debug: i32.this >= 0
    is
      castTo_u32
  as_i64 i64 is intrinsic
  as_u64 u64
    pre
      debug: i32.this >= 0
    is
      as_i64.as_u64

  # casting to unsigned, adding 1<<32 if negative
  castTo_u32 u32 is intrinsic
  castTo_u64 u64 is castTo_u32.as_u64

  # NYI: max is redefined here only to solve repeated inheritance conflict. Since max inherited
  # from hasInterval<i32> is abstract, fz should not complain about this conflict.
  redef max => 2147483647

  # create hash code from this number
  hash u64 is
    as_u64.hash


  # find the highest 1 bit in this integer and return integer with
  # this single bit set or 0 if this is 0.
  #
  highestOneBit i32 is
    val.as_u32.highestOneBit.as_i32


  # count the number of trailing zeros in this integer.
  #
  trailingZeros i32 is
    val.as_u32.trailingZeros
