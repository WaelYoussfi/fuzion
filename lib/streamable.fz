# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion standard library feature streamable
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

# streamable -- ancestor for features that can be converted to a stream
#
streamable<T> ref is


  # create a stream of T
  #
  asStream stream<T> is abstract


  # collect the contents of this streamable into an array
  #
  asArray array<T> is
    s1 := asStream
    s2 := asStream
    array<T> s1.count, fun (i i32) => s2.next


  # create a stream and call 'forAll f' on it
  #
  forAll(f fun (T)) unit is asStream.forAll f


  # create a stream and have it consumed by f, infix operator synonyme of forAll.
  #
  infix | (f fun (T)) => forAll f


  # create a stream, infix operator synonyme for asStream
  #
  postfix | => asStream


  # create a new stream and apply 'f' to each element 'e' as long as 'f e'
  #
  forWhile(f fun (T) bool) is asStream.forWhile f


  # create a new stream that contains the first elements of this stream for
  # which 'f e' is false
  #
  before(f fun (T) bool) stream<T> is asStream.before f


  # create a new stream and filter its elements using predicate f
  #
  filter   (f fun (T) bool) stream<T> is asStream.filter f


  # create a new stream and filter its elements using predicate f, infix operator
  # synonyme of filter.
  #
  infix |& (f fun (T) bool) => filter f


  # create a new stream and filter its elements using predicate f, infix operator
  # synonyme of filter.
  #
  # NYI: What is better, 'infix |&' or 'infix &', or something else?
  #
  infix & (f fun (T) bool) => filter f


  # create a stream and check if predicate f holds for all elements produced
  #
  infix ∀ (f fun (T) bool) bool is asStream ∀ f


  # create a stream and check if predicate f holds for at least one element produced
  #
  infix ∃ (f fun (T) bool) bool is asStream ∃ f


  # create a stream and then create a string from the elements of that stream
  #
  redef asString => asStream.asString
