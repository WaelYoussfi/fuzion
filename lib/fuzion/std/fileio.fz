# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature fuzion.std.fileio
#
#  Author: Wael Youssfi (wael.youssfi@tokiwa.software)
#
# -----------------------------------------------------------------------

# fuzion.std.fileio -- fileio presents basic operations to handle File I/O operations
#

public fileio is

  public read(
              # the (relative or absolute) file name, using platform specific path separators
              path string) outcome (array u8) is
    match get_file_size path
      num i64 =>
        file := array num.as_i32 i->(u8 0) # allocating an array the size of the file
        arr := fuzion.sys.c_string path # transforms the path to a utf8 byte array
        read arr file.internalArray.data // NYI: error handling for the read feature
        file
      error error =>
        error

  # intrinsic that fills an array u8 with the file bytes
  # returns true in case of success and false in case of failure
  #
  private read(
               # the internal array data representing the file path in bytes
               path Object,
               # the internal array data representing the container for the bytes to be read from the file
               file_array Object) bool is intrinsic


  public get_file_size(
                       # the (relative or absolute) file name, using platform specific path separators
                       path string) outcome i64 is
    arr := fuzion.sys.c_string path
    size := get_file_size arr unit
    if size != -1
      size
    else
      error "an error occurred while retrieving the size of the file/dir: \"$path\""

  # intrinsic that returns the file size in bytes or -1 in case of an error
  #
  private get_file_size(
                        # the internal array data representing the file path in bytes
                        path Object,
                        # dummy parameter for overloading
                        _ unit) i64 is intrinsic


  public write(
               # the (relative or absolute) file name, using platform specific path separators
               path string,
               # the content of the file as an u8 array
               content array u8) outcome unit is
    arr := fuzion.sys.c_string path
    if write arr content.internalArray.data content.length
      unit
    else
      error "an error occurred during writing the file: \"$path\""

  # intrinsic to write bytes (internal array data) in a file using the file path
  # returns TRUE in case of success and FALSE in case of failure
  #
  private write(
                # the internal array data representing the file path in bytes
                path Object,
                # the internal array data representing the content bytes to insert in file
                content Object,
                # the length of the internal array representing the content
                content_length i32) bool is intrinsic


  public exists(
                # the (relative or absolute) file/directory name, using platform specific path separators
                path string) outcome bool is
    arr := fuzion.sys.c_string path
    rslt := exists arr unit
    if rslt = 1
      true
    else if rslt = 0
      false
    else
      error "an error occurred while performing exists operation on the following file/dir: \"$path\""

  # intrinsic that checks the existence of the file/directory in the path
  # it returns 1 in case the file/dir exists, 0 in case it does not exist and -1 in case of an error
  #
  private exists(
                 # the internal array data representing the file/directory path in bytes
                 path Object,
                 # dummy parameter for overloading
                 _ unit) i8 is intrinsic


  public delete(
                # the (relative or absolute) file name, using platform specific path separators
                path string) outcome unit is
    arr := fuzion.sys.c_string path
    if delete arr unit
      unit
    else
      error "an error occurred while performing the delete operation on the following file/dir: \"$path\""

  # intrinsic that deletes the file/dir represented by the path returning TRUE in case of success
  # and FALSE in case of failure
  #
  private delete(
                 # the internal array data representing the file/dir path in bytes
                 path Object,
                 # dummy parameter to avoid duplicate feature name
                 _ unit) bool is intrinsic


  public move(
              # the old (relative or absolute) file name, using platform specific path separators
              old_path string,
              # the new (relative or absolute) file name, using platform specific path separators
              new_path string) outcome unit is
    arr0 := fuzion.sys.c_string old_path
    arr1 := fuzion.sys.c_string new_path
    if move arr0 arr1 unit
      unit
    else
      error "an error occurred while performing the following move operation: \"$old_path\" --> \"$new_path\""

  # intrinsic that returns TRUE in case the move was successful and FALSE in case not
  #
  private move(
               # the internal array data representing the old file/dir path in bytes
               old_path Object,
               # the internal array data representing the new file/dir path in bytes
               new_path Object,
               # dummy parameter for overloading
               _ unit) bool is intrinsic


  public create_dir(
                    # the (relative or absolute) dir name, using platform specific path separators
                    path string) outcome unit is
    arr := fuzion.sys.c_string path
    if create_dir arr unit
      unit
    else
      error "an error occurred while creating the following directory: \"$path\""

  # intrinsic that returns TRUE in case of success or FALSE in case of failure during dir creation
  #
  private create_dir(
                     # the internal array data representing the dir path in bytes
                     path Object,
                     # dummy parameter for overloading
                     _ unit) bool is intrinsic
