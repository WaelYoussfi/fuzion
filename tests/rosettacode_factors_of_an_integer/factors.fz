# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion test factors
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

factors
{
  print(x i32) unit
  {
    stdout.print(" " + x);
  }

  n := 42;

  stdout.print("factors using a loop:");
  for
    x in 1..n
  do
  {
    if (n % x) == 0 { print(x); }
  }
  stdout.println;

  stdout.print("factors iterating over an interval:");
  (1..n).iterate(fun (x i32) { if (n % x) == 0 { print(x); } });
  stdout.println;

  stdout.print("factors consuming a stream:");
  (1..n).asStream.consume(fun (x i32) { if (n % x) == 0 { print(x); } })
  stdout.println;

  stdout.print("factors filtering and consuming a stream:");
  (1..n).filter(fun (x i32) => (n % x) == 0).consume(fun print);
  stdout.println;

  stdout.print("factors filtering and printing a stream: ");
  (1..n).filter(fun (x i32) => (n % x) == 0).print;
  stdout.println;

  stdout.print("factors using pipes to filter and print a stream: ");
  (1..n) & (fun (x i32) => (n % x) == 0) | fun print;
  stdout.println;

  (1..n) | fun (m i32)
    {
      stdout.print("factors of " + m + ": ");
      (1..m) & (fun (x i32) => (m % x) == 0) | fun print;
      stdout.println;
    }

  // better
  //
  // factors(n i32) => (1..n).filter((x) => (x % 0) == 0);
  // stdout.print(factors(42));

  // also cool would be
  //
  // i32 { factors => (1..outer).filter((x) => (x % 0) == 0); }
  // stdout.print(42.factors);

}
