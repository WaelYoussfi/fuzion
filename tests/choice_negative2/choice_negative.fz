# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion test choice_negative
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

choice_negative
{
  cyclic7
  {
    A
    {
      x A | i32 | string := "Hello";  // 4. should flag an error: cyclic choice
      s
      {
        match x
        {
          a A      => { stdout.println("A.x is A") }
          i i32    => { stdout.println("A.x is i32") }
          s string => { stdout.println("A.x is string") }
        }
      }
    }
  }
  cyclic7.A.s; // NYI: would be nice if this was detected w/o a call to x

  cyclic8
  {
    A
    {
      x ref A | i32 | string := "Hello";
      s
      {
        match x
        {
          a ref A  => { stdout.println("A.x is A") }
          i i32    => { stdout.println("A.x is i32") }
          s string => { stdout.println("A.x is string") }
        }
      }
    }
  }
  cyclic8.A.s;

  cyclic9
  {
    A
    {
      x i32 | A | string := "Hello";  // 5. should flag an error: cyclic choice
      s
      {
        match x
        {
          a A      => { stdout.println("A.x is A") }
          i i32    => { stdout.println("A.x is i32") }
          s string => { stdout.println("A.x is string") }
        }
      }
    }
  }
  cyclic9.A.s; // NYI: would be nice if this was detected w/o a call to x

  cyclic10
  {
    A
    {
      x i32 | ref A | string := "Hello";
      s
      {
        match x
        {
          a ref A  => { stdout.println("A.x is A") }
          i i32    => { stdout.println("A.x is i32") }
          s string => { stdout.println("A.x is string") }
        }
      }
    }
  }
  cyclic10.A.s;

  cyclic11
  {
    A
    {
      x i32 | string | A := "Hello";  // 6. should flag an error: cyclic choice
      s
      {
        match x
        {
          a A      => { stdout.println("A.x is A") }
          i i32    => { stdout.println("A.x is i32") }
          s string => { stdout.println("A.x is string") }
        }
      }
    }
  }
  cyclic11.A.s; // NYI: would be nice if this was detected w/o a call to x

  cyclic12
  {
    A
    {
      x i32 | string | ref A := "Hello";
      s
      {
        match x
        {
          a ref A  => { stdout.println("A.x is A") }
          i i32    => { stdout.println("A.x is i32") }
          s string => { stdout.println("A.x is string") }
        }
      }
    }
  }
  cyclic12.A.s;
}
