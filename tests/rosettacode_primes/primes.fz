# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion test primes
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

primes
{
  out := stdout;

  primes(n i32)  // sieve using loops
  {
    for
      a := Array<bool>(n+1, fun (i i32) => false);
      i := 2, i + 1;
    while i <= n
    {
      if !a[i]
      {
        out.print(i); out.print(" ");
        for
          j := i, j + i;
        while j <= n
        {
          a[j] = true;
        }
      }
    }
  }
  out.println("Primes using loop:"); primes(1000); out.println;

  primes2(n i32)   // sieve using streams
  {
    a := Array<bool>(n+1, fun (i i32) => false);
    (2..n).forAll(fun (i i32)
      {
        if (!a[i])
        {
          out.print(i); out.print(" ");
          (1..n).forWhile(fun (j i32) bool { a[i*j] = true; (i*j+i) <= n });
        }
      });
  }
  out.println("Primes using streams:"); primes2(1000); out.println;

  primes3(n i32)   // sieve using streams and filters
  {
    a := Array<bool>(n+1, fun (i i32) => false);
    (2..n).filter(fun (i i32) bool { !a[i] }).consume(fun (i i32)
      {
          out.print(i); out.print(" ");
          (1..n/i).forAll(fun (j i32) { a[i*j] = true; } );
         /* with more syntactic sugar, this could become:

          (1..n/i).forAll(j => a[i*j] = true);
          */
      });
  }
  out.println("Primes using streams and filters:"); primes3(1000); out.println;

  primes4(n i32)   // sieve using pipes
  {
    a := Array<bool>(n+1, fun (i i32) => false);

    (2..n) |& (fun (i i32) => !a[i]) | fun (i i32)
      {
          out.print(i); out.print(" ");
          (1..n/i) | fun (j i32) { a[i*j] = true; };
      };
/*
    (2..n) |& (i => !a[i]) | i =>
      {
          out.print(i); out.print(" ");
          (1..n/i) | j => { a[i*j] = true; };
      };
      */
  }
  out.println("Primes using pipes:"); primes4(1000); out.println;

}