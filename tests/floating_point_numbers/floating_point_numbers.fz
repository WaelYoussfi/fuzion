# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test floating_point_numbers
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------

floating_point_numbers is

  exitCode := 0

  chck(b bool, msg string) =>
    s := if b
      "PASSED: "
    else
      set exitCode := 1
      "FAILED: "
    say (s + msg)

  generic_tests<T: float<T>>(a T) is

    zero := a.zero
    one := a.one
    two := one + one
    three := one + one + one

    # serialize floating point numbers
    # NYI serialization will be done in fuzion and then we won't have
    # different results for interpreter- / c- backend
    chck ("{a.quietNaN}" ==  "nan" || "{a.quietNaN}" ==  "NaN")            "{a.name}: quiet nan serializes correctly"
    chck ("{a.negativeInfinity}"
      .replace("I", "i")
      .substring(0, 4) ==  "-inf")                                         "{a.name}: neg inf serializes correctly"
    chck ("{a.positiveInfinity}"
      .replace("I", "i")
      .substring(0, 3) ==  "inf")                                          "{a.name}: pos inf serializes correctly"
    chck ("{zero}".startsWith "0")                                         "{a.name}: 0 serializes to string"
    chck ("{-zero}".startsWith "-0")                                       "{a.name}: -0 serializes to string"
    chck ("{one}".startsWith "1")                                          "{a.name}: 1 serializes to string"
    chck ("{one / two}" == "0.5")                                          "{a.name}: 0.5 serializes to string"
    chck ("{one / three}".startsWith "0.3333333")                          "{a.name}: 1/3 serializes to string"

    # comparision operators
    chck (
      zero == zero &&
      zero != one &&
      one  >= zero &&
      zero <= one &&
      zero == zero &&
      one  >  zero &&
      zero <  one)                                                         "{a.name}: comparison operators work as expected"

    # negation operator
    chck ((-(-zero) == zero) &&
          (-(-one) == one) &&
          (-(-a.positiveInfinity) == a.positiveInfinity) &&
          (-(-a.negativeInfinity) == a.negativeInfinity))                  "{a.name}: double negation is same number"

    # operator +,-,*,/ test
    chck (zero + one == one)                                               "{a.name}: plus operator"
    chck (zero - one == -one)                                              "{a.name}: minus operator"
    chck (zero * one == zero)                                              "{a.name}: product operator"
    chck (zero / one == zero)                                              "{a.name}: division operator"

    # modulo
    chck (three % two == one)                                              "{a.name}: 3 modulo 2 equals 1"

    # power
    chck (two ** three == three + three + two)                             "{a.name}: 2 to the power 3 equals 8"
    chck (three ** two == three + three + three)                           "{a.name}: 3 to the power 2 equals 9"

    # sqrt
    chck (a.sqrt (two * two) == two)                                       "{a.name}: sqrt (2*2) = 2"

    # exponentation / logarithm
    chck (a.exp zero   == one)                                             "{a.name}: exp 0 = 1"
    chck (a.exp one    == a.ℇ)                                             "{a.name}: exp 1 = ℇ"
    chck (a.log one    == zero)                                            "{a.name}: log 1 = 0"

    # trigonometric
    chck (a.sin zero   == zero)                                            "{a.name}: sin 0  = 0"
    chck (a.sin a.π    <  a.epsilon)                                       "{a.name}: sin π  ~= 0"
    chck (a.cos zero   == one)                                             "{a.name}: cos 0  = 1"
    chck (a.cos a.π    == -one)                                            "{a.name}: cos π  = -1"
    chck (a.tan zero   == zero)                                            "{a.name}: tan 0  = 0"
    chck (a.asin zero  == zero)                                            "{a.name}: asin 0 = 0"
    chck (a.acos one   == zero)                                            "{a.name}: acos 1 = 0"
    chck (a.atan zero  == zero)                                            "{a.name}: atan 0 = 0"

    # hyperbolicus
    chck (a.sinh zero   == zero)                                           "{a.name}: sinh  0 = 0"
    chck (a.cosh zero   == one)                                            "{a.name}: cosh  0 = 1"
    chck (a.tanh zero   == zero)                                           "{a.name}: tanh  0 = 0"
    chck (a.asinh zero  == zero)                                           "{a.name}: asinh 0 = 0"
    chck (a.acosh one   == zero)                                           "{a.name}: acosh 1 = 0"
    chck (a.atanh zero  == zero)                                           "{a.name}: atanh 0 = 0"


  generic_tests f32s.zero
  generic_tests f64s.zero

  # castTo_f32, 0, -∞, ∞
  chck ((u32 0x_8000_0000).castTo_f32 == (-f32s.zero))                 "castTo_f32 works, bit representation for 0 is correct"
  chck ((u32 0x_FF80_0000).castTo_f32 == (f32s.negativeInfinity))      "castTo_f32 works, bit representation for -∞ is correct"
  chck ((u32 0x_7F80_0000).castTo_f32 == (f32s.positiveInfinity))      "castTo_f32 works, bit representation for ∞ is correct"

  # castTo_u32
  chck ((-f32s.zero).castTo_u32 == 0x_8000_0000)                       "castTo_u32 works for -0"
  chck ((f32s.negativeInfinity).castTo_u32 == 0x_FF80_0000)            "castTo_u32 works for -∞"
  chck ((f32s.positiveInfinity).castTo_u32 == 0x_7F80_0000)            "castTo_u32 works for ∞"

  # castTo_f64, 0, -∞, ∞
  chck ((u64 0x_8000_0000_0000_0000).castTo_f64 == (-f64s.zero))                 "castTo_f64 works, bit representation for 0 is correct"
  chck ((u64 0x_FFF0_0000_0000_0000).castTo_f64 == (f64s.negativeInfinity))      "castTo_f64 works, bit representation for -∞ is correct"
  chck ((u64 0x_7FF0_0000_0000_0000).castTo_f64 == (f64s.positiveInfinity))      "castTo_f64 works, bit representation for ∞ is correct"

  # castTo_u64
  chck ((-f64s.zero).castTo_u64 == 0x_8000_0000_0000_0000)                       "castTo_u64 works for -0"
  chck ((f64s.negativeInfinity).castTo_u64 == 0x_FFF0_0000_0000_0000)            "castTo_u64 works for -∞"
  chck ((f64s.positiveInfinity).castTo_u64 == 0x_7FF0_0000_0000_0000)            "castTo_u64 works for ∞"

  # minExp, maxExp
  chck (f32s.minExp == -126)                                              "f32 minExp is correct"
  chck (f32s.maxExp == 127)                                               "f32 maxExp is correct"
  chck (f64s.minExp == -1023)                                             "f64 minExp is correct"
  chck (f64s.maxExp == 1024)                                              "f64 maxExp is correct"

  fuzion.std.exit exitCode
