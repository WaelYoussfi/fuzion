# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion test illegal_assignment
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

illegal_assignment {

  Q ref {
    A ref { x { stdout.println("*** should never be here ***"); } }
    B ref { x { stdout.println("*** should never be here ***"); } }
    C ref { x { stdout.println("*** should never be here ***"); } xc {}; }
    D ref { x { stdout.println("*** should never be here ***"); } xb {}; xc {}; }
    E ref { x { stdout.println("*** should never be here ***"); } xb {}; xc {}; }
  }

  curid i32 = 0;
  id i32
  {
    set result := curid;
    set curid := result + 1;
  }

  A ref {
    ident := id;
    stdout.println("A's body" + ident);
    x is abstract
  }
  B ref : A {
    stdout.println("B's body" + ident);
    redefine x { stdout.println("B.x"); }
    xb { stdout.println("B.xb"); }
  }
  C ref : A {
    redefine x { stdout.println("C.x"); }
    xc { stdout.println("C.xc"); }
  }
  D ref : B, C {
  }
  E ref : D {
    redefine x  { stdout.println("E.x" ); }
    redefine xb { stdout.println("E.xb"); }
    redefine xc { stdout.println("E.xc"); }
  }
  bi := B;
  ci Q.C; set ci := C;  // 1. should flag an error: illegal assignment
  aa Q.A; set aa := bi; // 2. should flag an error: illegal assignment
  bi.x;
  ci.x;
  aa.x;
  set aa := ci; // 3. should flag an error: illegal assignment
  aa.x;
  di Q.D; set di := D; // 4. should flag an error: illegal assignment
  ei Q.E; set ei := E; // 5. should flag an error: illegal assignment
  stdout.println("Calling non-redefed multiple");
  di.x;
  di.xb;
  di.xc;
  stdout.println("Calling redefed multiple");
  ei.x;
  ei.xb;
  ei.xc;
  stdout.println("Calling redefed multiple from non-redefed static ");
  set di := ei;  // 6. should flag an error: illegal assignment
  di.x;
  di.xb;
  di.xc;
  set bi := di;  // 7. should flag an error: illegal assignment
  set ci := di;  // 8. should flag an error: illegal assignment
  bi.x;
  bi.xb;
  ci.x;
  ci.xc;
  set aa := ei;  // 9. should flag an error: illegal assignment
  aa.x;

}
