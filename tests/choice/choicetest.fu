choicetest {

  out := stdout;

  // object-oriented style using subclasses
  Light ref { }
  Red    ref : Light {}
  Yellow ref : Light {}
  Green  ref : Light {}

  l1 Light = Red;
  l2 Light = Green;

  out.println("l1 is Red, l2 is Green");

  // using choice-type
  Penny   {}
  Nickel  {}
  Dime    {}
  Quarter {}

  Coin : choice
    <Penny,
     Nickel,
     Dime,
     Quarter>
  {
    value_in_cents() i32 {
      (Coin.this ? Penny   => 1
                   Nickel  => 5
                   Dime    => 10
                   Quarter => 25)
    }
  }

  value_in_cents(c Coin) i32 {
    result = match c {
      Penny   => 1
      Nickel  => 5
      Dime    => 10
      Quarter => 25
    }
  }

  out.println("creating array:");
  coins Array<Coin>;
  a := Array<Coin>(10, fun (i i32) Coin { Penny });
  a[0] = Penny;
  a[1] = Penny;
  a[2] = Penny;
  a[3] = Penny;
  a[4] = Nickel;
  a[5] = Dime;
  a[6] = Dime;
  a[7] = Quarter;
  a[8] = Quarter;
  a[9] = Quarter;

  out.print("summing array using loop: ");
  sum := { for i := 0, i + 1;
               s := 0, s + value_in_cents(a[i]);
           until i >= 9
         };
  out.println(sum);

  out.print("summing array using iterator: ");
  sum = 0;
  a.iterate(fun (c Coin) { sum = sum + value_in_cents(c); })
  out.println(sum);

  out.println("summing array using iterator and inner feature: ");
  sum = 0;
  a.iterate(fun (c Coin) { sum = sum + c.value_in_cents(); })
  out.print(sum); out.println;

}