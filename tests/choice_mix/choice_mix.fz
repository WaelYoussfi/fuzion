# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa GmbH, Berlin
#
#  Source code of Fuzion test choice_mix
#
#  Author: Fridtjof Siebert (siebert@tokiwa.eu)
#
# -----------------------------------------------------------------------

choice_mix {

  out := stdout;

  Nil { }
  MyObj ref { }
  MyRef(x,y,z i32) ref : MyObj
  {
    a,b,c i32;
    set a := x+x;
    set b := y+y;
    set c := z+z;
  }

  Mix : choice<i32,
               bool,
               string,
               Nil,
               MyRef> { };

  a Mix = 3;
  b Mix = true;
  c Mix = "string";
  d Mix = Nil;
  e Mix = MyRef(3,4,5);

  show_a()
  {
    out.print("show_a ");
    match a
    {
      i32    => { out.println("i32:    "); }
      bool   => { out.println("bool:   "); }
      string => { out.println("string: "); }
      Nil    => { out.println("Nil:    "); }
      MyObj  => { out.println("MyObj:  "); }
    }
  }

  show_v()
  {
    out.print("show_v ");
    match a
    {
      i i32    => { out.println("i32:    " + i); }
      b bool   => { out.println("bool:   " + b); }
      s string => { out.println("string: " + s); }
      n Nil    => { out.println("Nil:    " + n); }
      m MyObj  => { out.println("MyObj:  " + m); }
    }
  }

  show_i()
  {
    out.print("show_a ");
    match a
    {
      i32, string, Nil => { out.println("has 'i'"); }
      bool, MyObj      => { out.println("has no 'i'"); }
    }
  }

  show_b()
  {
    out.print("show_b  ");
    match b
    {
      i32    => { out.println("i32:    "); }
      bool   => { out.println("bool:   "); }
      string => { out.println("string: "); }
      Nil    => { out.println("Nil:    "); }
      MyObj  => { out.println("MyObj:  "); }
    }
  }

  show_c()
  {
    out.print("show_c  ");
    match c
    {
      i32    => { out.println("i32:    "); }
      bool   => { out.println("bool:   "); }
      string => { out.println("string: "); }
      Nil    => { out.println("Nil:    "); }
      MyObj  => { out.println("MyObj:  "); }
    }
  }

  show_d()
  {
    out.print("show_d  ");
    match d
    {
      i32    => { out.println("i32:    "); }
      bool   => { out.println("bool:   "); }
      string => { out.println("string: "); }
      Nil    => { out.println("Nil:    "); }
      MyObj  => { out.println("MyObj:  "); }
    }
  }

  show_e()
  {
    out.print("show_e  ");
    match e
    {
      i32    => { out.println("i32:    "); }
      bool   => { out.println("bool:   "); }
      string => { out.println("string: "); }
      Nil    => { out.println("Nil:    "); }
      MyObj  => { out.println("MyObj:  "); }
    }
  }

  v00 Mix = ?;

  show00()
  {
    out.print("show00 ");
    match v00
    {
      i32    => { out.println("i32:    "); }
      bool   => { out.println("bool:   "); }
      string => { out.println("string: "); }
      Nil    => { out.println("Nil:    "); }
      MyObj  => { out.println("MyObj:  "); }
    }
  }

  show0(v Mix)
  {
    out.print("show0  ");
    match v
    {
      i32    => { out.println("i32:    "); }
      bool   => { out.println("bool:   "); }
      string => { out.println("string: "); }
      Nil    => { out.println("Nil:    "); }
      MyObj  => { out.println("MyObj:  "); }
    }
  }

  show(v Mix)
  {
    out.print("show   ");
    match v
    {
      i i32    => { out.println("i32:    " + i); }
      b bool   => { out.println("bool:   " + b); }
      s string => { out.println("string: " + s); }
      n Nil    => { out.println("Nil:    " + n); }
      m MyObj  => { out.println("MyObj:  " + m); }
    }
  }

  out.print("a: "); show_a();
  out.print("b: "); show_b();
  out.print("c: "); show_c();
  out.print("d: "); show_d();
  out.print("e: "); show_e();

  out.print("a: "); set v00 := a; show00();
  out.print("b: "); set v00 := b; show00();
  out.print("c: "); set v00 := c; show00();
  out.print("d: "); set v00 := d; show00();
  out.print("e: "); set v00 := e; show00();

  out.print("a: "); show0(a);
  out.print("b: "); show0(b);
  out.print("c: "); show0(c);
  out.print("d: "); show0(d);
  out.print("e: "); show0(e);

  for
    i := 0, i + 1;
  while i < 6
    {
      if i > 0 { out.println("-------------") }
      out.print("show_a : "); show_a;
      out.print("show_v : "); show_v;
      out.print("show_i : "); show_i;
      out.print("show(a): "); show(a);
      out.print("show(b): "); show(b);
      out.print("show(c): "); show(c);
      out.print("show(d): "); show(d);
      x Mix = a;
      set a := b;
      set b := c;
      set c := d;
      set d := e;
      set e := x;
    }

  colors1  // using choice over features inheriting from abstract feature
  {
    color { rgb u32 is abstract }
    red     : color { redefine rgb u32 is 255.as_u32*256*256;  }
    green   : color { redefine rgb u32 is 255.as_u32*256;      }
    blue    : color { redefine rgb u32 is 255.as_u32;          }
    yellow  : color { redefine rgb u32 is red.rgb + green.rgb; }
    magenta : color { redefine rgb u32 is red.rgb + blue.rgb;  }
    black   : color { redefine rgb u32 is 0.as_u32;            }
    white   : color { redefine rgb u32 is red.rgb + blue.rgb + green.rgb; }
    transparent (alpha u32) : color
      pre alpha >= 0, alpha <= 255;
    {
      redefine rgb => alpha * 256*256*256;
    };

    p, q, r, s, t choice<red,
                         green,
                         blue,
                         yellow,
                         magenta,
                         black,
                         white,
                         transparent>;

    print(c choice<red,
                   green,
                   blue,
                   yellow,
                   magenta,
                   black,
                   white,
                   transparent>)
    {
      match c
      {
        r red         => { out.println("red" + r.rgb); }
        g green       => { out.println("grn" + g.rgb); }
        b blue        => { out.println("blu" + b.rgb); }
        y yellow      => { out.println("yel" + y.rgb); }
        m magenta     => { out.println("mag" + m.rgb); }
        k black       => { out.println("blk" + k.rgb); }
        w white       => { out.println("wht" + w.rgb); }
        t transparent => { out.println("trp" + t.rgb); }
      }
    }
    set p := red;
    set q := green;
    set r := black;
    set s := transparent(200);
    set t := transparent(100);
    print(p);
    print(q);
    print(r);
    print(s);
    print(t);
  }
  colors1;

  colors2  // same as colors1, using pipe notation
  {
    color { rgb u32 is abstract }
    red     : color { redefine rgb u32 is 255.as_u32*256*256;  }
    green   : color { redefine rgb u32 is 255.as_u32*256;      }
    blue    : color { redefine rgb u32 is 255.as_u32;          }
    yellow  : color { redefine rgb u32 is red.rgb + green.rgb; }
    magenta : color { redefine rgb u32 is red.rgb + blue.rgb;  }
    black   : color { redefine rgb u32 is 0.as_u32;            }
    white   : color { redefine rgb u32 is red.rgb + blue.rgb + green.rgb; }
    transparent (alpha u32) : color
    require alpha >= 0, alpha <= 255;
    {
      redefine rgb => alpha * 256*256*256;
    };

    p, q, r, s, t red
                | green
                | blue
                | yellow
                | magenta
                | black
                | white
                | transparent;

    print(c red
          | green
          | blue
          | yellow
          | magenta
          | black
          | white
          | transparent)
    {
      match c
      {
        r red         => { out.println("red"+ r.rgb); }
        g green       => { out.println("grn"+ g.rgb); }
        b blue        => { out.println("blu"+ b.rgb); }
        y yellow      => { out.println("yel"+ y.rgb); }
        m magenta     => { out.println("mag"+ m.rgb); }
        k black       => { out.println("blk"+ k.rgb); }
        w white       => { out.println("wht"+ w.rgb); }
        t transparent => { out.println("trp"+ t.rgb); }
      }
    }
    set p := red;
    set q := green;
    set r := black;
    set s := transparent(200);
    set t := transparent(100);
    print(p);
    print(q);
    print(r);
    print(s);
    print(t);
  }
  colors2;

  alternatives1  // use pipe for choice result type
  {
    f(i i32) i32 | bool | string
    {
      if i < 10 { i }
      else if i < 20 { i > 15 }
      else { "Large" }
    }
    for
      i := 0, i + 1;
    while i<25
    {
      out.print(i); out.print(" ==> ");
      match f(i)
      {
        x i32 => out.print(x)
        b bool => { if b { out.print( "true") } else { out.print("false") } }
        s string => out.print(s)
      }
      out.println;
    }

    // check that pipe also works as operator:
    (1..10) | { fun (i i32) { out.print(i); } }; out.println;
  }
  alternatives1;

  alternatives2  // use pipe for choice argument type
  {
    Nil { }
    MyRef (a,b,c i32) ref { }

    test(p i32 | bool | string | Nil | MyRef)
    {
      match p
      {
        i i32    => { out.println("i32:    " + i); }
        b bool   => { out.println("bool:   " + b); }
        s string => { out.println("string: " + s); }
        n Nil    => { out.println("Nil:    " + n); }
        m MyRef  => { out.println("MyRef:  " + m); }
      }
    }

    test(3);
    test(true);
    test("string");
    test(Nil);
    test(MyRef(3,4,5));
  }
  alternatives2;


/* possible syntactic sugar:

  enum col
  {
    red,
    green,
    blue
  }

as sugar for

  col : choice<red, green, blue> { }
  red { }
  green { }
  blue { }

?

*/

}
